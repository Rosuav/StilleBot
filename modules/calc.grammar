/* First entry defines the entire thing parsed */
expression: multicompare;

/* These don't short-circuit, partly b/c the expression evaluator ALWAYS
parses all variables before evaluating anything */
multicompare: compare;
multicompare: compare "&&" compare {binop};
multicompare: compare "||" compare {binop};
/* Convenience aliases */
multicompare: compare "&" compare {binop};
multicompare: compare "|" compare {binop};

/* Note that "1 < 2 < 3" is not supported, to allow future expansion
with possible Python-style semantics */
compare: add;
compare: add "<" add {binop};
compare: add "<=" add {binop};
compare: add "==" add {binop};
compare: add "!=" add {binop};
compare: add ">=" add {binop};
compare: add ">" add {binop};
/* Convenience aliases */
compare: add "=" add {binop};
compare: add "=>" add {binop};

add: multiply;
add: add "+" multiply {binop};
add: add "-" multiply {binop};
multiply: expon;
multiply: multiply "*" expon {binop};
multiply: multiply "/" expon {binop};
multiply: multiply "%" expon {binop};
expon: number;
expon: number "**" expon {binop};

digit: "0";
digit: "1";
digit: "2";
digit: "3";
digit: "4";
digit: "5";
digit: "6";
digit: "7";
digit: "8";
digit: "9";
integer: digit;
integer: digit integer {stitch};
float: integer "." {stitch};
float: "." integer {stitch};
float: integer "." integer {stitch};
number: integer {makeint};
number: float {makefloat};
number: "(" expression ")" {parens};

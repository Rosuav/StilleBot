/* Styling across all StilleBot pages */
* {box-sizing: border-box;}

td {padding: 0.25em 0.5em;}

table {border-collapse: collapse;}

input {background: #ffe;}
input[type=submit] {background: inherit;}
input[type=number] {width: 4em;}
input[type=color] {vertical-align: middle;}
input.narrow {width: 6em;}

dialog {
	position: fixed;
	resize: both; overflow: auto; /* TODO: Should only some dialogs support resizing? */
}
@supports (-moz-appearance:none) {
	/* Firefox doesn't automatically position dialogs properly. */
	/* It's a pain to try to center them during resizes, so just
	position them once and hope for the best. */
	/* CJA 20220107: It might actually work natively in some
	versions now. Will have to see if this can be removed. */
	dialog {top: 50%; transform: translateY(-50%);}
}
/* Create a scroll context inside dialogs */
dialog > section {
	display: flex;
	flex-direction: column;
}
dialog > section > header {
	display: flex;
	justify-content: space-between;
}
dialog > section > header > h3 {
	margin: 0.5em 0;
}
dialog > section > div, dialog > section > form > div {
	overflow-y: auto;
	max-height: 70vh;
}
/* To give a dialog a single interior scrollable, add class "resizedlg"
to the dialog and "primary" to the one that should scroll. */
.resizedlg > section > div {
	display: flex;
	flex-direction: column;
}
.resizedlg > section > div > * {
	flex: 0 0;
}
.resizedlg > section > div > .primary {
	overflow-y: auto;
	flex: 1;
}
.dialog_cancel {
	position: relative;
	right: -8px; top: -8px;
}

.emotedtext {
	line-height: 35px;
}

main {
	max-width: 1200px;
	margin: auto;
	background-color: #eeeeee;
	padding: 0 0.5em;
}

.widetext {width: 100%;}

h1,h2,h3 {
	max-width: max-content;
	margin-left: auto; margin-right: auto;
}

.flagstable {min-width: 700px;}

.simpletext {display: flex;}
.simpletext input {flex-grow: 1;}
.simpletext button {flex-grow: 0;}

.optedmsg {
	padding: .5em;
	margin: .5em;
}

.iftrue {border-color: #0bb;}
.iffalse {border-color: #a08;}

nav a {
	font-size: smaller;
}

/* Hype train styles */
#status {
	background-color: #a0a0ff;
	font-size: 125%;
}
#status.active {
	background-color: #a0ffa0;
	font-weight: bold;
}
:root {
	/* Define some colours that can also be used in a gradient */
	--hype-level1: #ffffd0; /* Progressively more vibrant colours as you go up the levels */
	--hype-level2: #ffffb0; /* Or #ffffa0 */
	--hype-level3: #ffff90; /* Or #fff870 for a more 'gold' colour */
	--hype-level4: #ffff70; /* Or #fff040 */
	--hype-level5: #ffff50; /* Or #ffe820 */
	--hype-level6: #ffff00;
}
#nextlevel.level1 {background-color: var(--hype-level1);}
#nextlevel.level2 {background-color: var(--hype-level2);}
#nextlevel.level3 {background-color: var(--hype-level3);}
#nextlevel.level4 {background-color: var(--hype-level4);}
#nextlevel.level5 {background-color: var(--hype-level5);}
#nextlevel.level6 {background-color: var(--hype-level6);}
/* It'd be really cool to get the conductors' chat colours, but probably impractical */
#cond_bits.present, #cond_subs.present {background-color: #e060e0;}

.dirty {
	background-color: #fdd;
}

#templates {
	min-height: 30em;
}

#templates tbody tr:nth-child(odd) {
	background: #eef;
	cursor: pointer;
}

#templates tbody tr:nth-child(even) {
	background: #eff;
	cursor: pointer;
}

#templates tbody tr:hover {
	background: #ff0;
}

table[data-dest=""] > tr.targetrow {
	display: none;
}

table[data-builtin=""] > tr.paramrow {
	display: none;
}

table[data-dest]:not([data-dest="/set"]):not([data-dest="/web"]) > tr.destcfgrow {
	display: none;
}

/* Styling of command editors - classic, graphical, and raw */
#advanced_view header div {order: 2;} /* Force the close button to the end */
.buttonbox {
	display: flex;
	padding: 0; margin: 5px 0;
	list-style-type: none;
	gap: 5px;
	align-items: flex-end;
	flex-wrap: wrap;
}
.buttonbox.attached {margin-bottom: 1px;}
#cmdviewtabset label {
	background: #a0f0c0;
	padding-right: 0.25em;
}

#command_gui {
	border: 1px solid black;
	margin: 0.5em;
}
.msgedit {
	width: min-content;
}
#typedesc {max-width: fit-content;}
#setprops {min-width: 25em;}
/* Alternating colours doesn't really improve things much
#setprops tr:nth-child(odd) {background: #dff;}
#setprops tr:nth-child(even) {background: #ddf;}
*/

.clipbtn {cursor: copy;}
#copied {
	opacity: 0;
	position: absolute;
	background: black;
	color: white;
	border: 1px solid green;
	margin-left: 1.5em;
	padding: 2px;
	cursor: default;
	transition: opacity 2s 0.5s;
}
#copied.shown {
	opacity: 1;
	transition: opacity .5s 0s;
}

nav#sidebar {
	display: none;
}

#togglesidebar {
	/* Make the button look like a hamburger menu */
	border: 0;
	font-size: 0;
	padding: 0;
	height: 32px; width: 32px;
	margin-right: 8px;
	background: linear-gradient(transparent 0%, transparent 14%,
		#bbb 14%, #bbb 28%, transparent 28%, transparent 42%,
		#bbb 42%, #bbb 56%, transparent 56%, transparent 70%,
		#bbb 70%, #bbb 84%, transparent 84%);
}

@media screen and (min-width: 600px) {
	/* Firefox doesn't currently support the :has selector (it's supported in Ff 103 with a
	flag, but as of 20230414, not vanilla in any version), so instead of the simpler directive
	body:has(nav#sidebar) {padding-left: 100px;}
	we use two directives, one to create the padding unconditionally, and one to remove it if
	we don't want it. This means that Firefox, until it grows support for the :has selector,
	will waste 100px of space when there's no sidebar. */
	body {padding-left: 100px;}
	body:not(:has(nav#sidebar.vis)) {
		padding-left: 0;
	}
	nav#sidebar.vis {
		display: block;
		position: fixed;
		left: 0px;
		width: 100px;
		top: 48px; bottom: 0;
		background-color: #a0f0c0;
	}
	#togglesidebarbox.sbvis {
		display: block;
		position: fixed;
		left: 0; top: 0;
		width: 100px; height: 48px;
		background-color: #a0f0c0;
		padding: 8px;
	}
}

* Per-channel rate limiting instead of the current one-per-second globally
  - Where the bot is a mod, the limit is three per sec. In other channels, must respect slow mode.
  - Is there a way to detect channel slow mode on connection? If it changes, there's a NOTICE.
    - Possibly ROOMSTATE, but I'm not receiving those.
* Variables.
  - NOTE: As of 2021-01-13, all variables are stored in persist_status->variables->#chan->$var$
    and any that aren't dollar-bracketed are buggy. This may change in the future, with
    the persisted mapping NOT having the dollar signs.
* Add some example/template commands that use cooldowns.
  - The functionality exists, but it can be used in a variety of ways. Good examples:
    - Short cooldown, no else. A simple squelch effect (command can't be used inside
      fifteen seconds).
    - Long cooldown, 'else' has alternate message. Command gives you some actual benefit,
      and you can only use it once every hour.
    - Very short cooldown (2 seconds), 'else' adds to variable and has output with a two
      second delay that emits everything from the variable. Will batch up busy responses.
      - Would be perfect in a !!giveaway_ticket special, or anything where it's normal
        for lots of people to use it all at once.
* Across an update of connection.pike, retain the mod list, until such time as we get an
  updated list.
* Pike HTTP, SSL, and keep-alive: what's going on? Is that why Chrome gets confused?
  - It's currently just disabled - we add "Connection: close" to all responses. Would
    be nice to figure out what's actually wrong and then reap the performance benefits.
* Advanced timer functionality
  - If there's already a timer of this command happening, allow the user to pick whether it
    adds another independent one (current behaviour), restarts the timer (cancel existing
    and create new), or errors out with an immediate message of some sort.
  - Optionally emit message only if online at the time.
* Raid finder: Also show recent outgoing raids to allow notes to be added?
  - Or just "pick any channel, add notes". Have it show the stream as if in the raid finder.
  - The allfollows display could be this, but it's nondiscoverable and could be quite costly
    for people who follow a lot of people.
  - Adding ?raiders will show incoming, but not outgoing, raids.
* Raid finder: Once the /streams endpoint starts reporting CCLs (the way /channels does),
  show this info on the tile somewhere.
* Importing of config export files
  - Create all listed commands, but don't destroy unmentioned ones (overwrite any with
    the same name, of course). Ditto specials, but whitelist the names, of course.
  - Identify triggers by their IDs, and merge accordingly.
    - What happens if they're in a different order? This is currently the only plausible
      way to reorder triggers, which might be significant.
  - Update timezone if specified.
  - What about quotes??? How do we validate their format?
    - Hand each one, individually, to the updater from the front end??
* Is it possible to get a "recent messages" timeout? Would allow squishing of spam if the
  channel is too quiet. Might not be worth it though.
* Polish multi-voice.
  - This would allow the bot to see its own messages, but only if sent by a non-primary
    account.
  - Allow accounts to have a different default voice - probably just the channel's own.
    Then allow people to activate the bot, authenticate for self-voicing, and immediately
    start using bot features, with some restrictions, and with me able to lift those by
    granting them full permission.
  - Unify permissions for bcaster_auth and voice authentication
* Authentication on Firefox may now have issues with the default popup blocker. Can we
  comply with normal "click for popup" expectations somehow?
* Enable/disable rewards - allow use of title, will do lookup
* Create a way to daisychain into an existing command. This will allow a special to
  "alias" to a command, or for a command to do things and then chain.
  - What should happen with nested information eg from builtins?
  - Will this make StilleBot commands Turing-complete?
* If you attempt to rename a command or add an alias that already exists (and isn't an
  alias for the current command), warn on client side and block save unless confirmed.
* Tidy up demo mode a bit.
  - Some pages have mutely nonfunctional buttons - they should announce that it's a demo.
  - Now that there's a sidebar showing all available features, it's the more important
    to have a viable demo page everywhere. Check - eg giveaway doesn't look good.
* Goal bar templates - nice easy ones that you can use right away
  - Note that Twitch now has on-platform goals that track current followers and subs,
    so this can continue to focus on how many have been gained recently (eg daily
    sub/resub count).
  - All of them will be usable out-of-the-box, but have "Advanced" that lets you fully
    customize the advancement. Also, if you REALLY need flexibility, they are backed by
    the variable system, so any command or special can move them around.
  - Make the advancement command a proper thing. It should be broadly possible to hack
    together a bit-boss kind of thing if you want to.
  - Standard goal bars:
    - Daily subs/resubs
    - Daily sub points (ie tiered subs count for more)
    - Daily cheers
    - All stream support (subs, resubs, cheers, all worth their USD equivalents)
    - Any others?
* Special trigger when any goal bar tiers up?? Would be better than the weird system
  where it triggers an actual command. Could deep link straight to the editor now.
* "max-width: fit-content" doesn't work in Firefox - but nor does -moz-fit-content :(
  - Causes display problems on graphical editor and opening up element details
* runhooks/register_hook is deprecated (use 'inherit hook'). Eventually remove it.
* Should ALL specials function as implicit arrays, the way triggers do?
  - Alternatively: should invocations and executions be separated? Aliases would then
    be just another way to have more than one invocation for a single command.
* With the shutdown of Kraken, can we record things locally that used to be on Twitch?
  - Followed games/categories - you can still follow/unfollow but you can't query it in API
* Need to enumerate all the places where a channel name gets used as a config key
  (outside of persist_config->channels->username) so they can be changed on rename.
  - persist_status->bcaster_token, bcaster_token_scopes
* Art Share tool
  - Implement !permit command for temporary single-use access
  - Mod command to nuke the last-posted file?
  - Anyone currently under timeout or ban is to be denied upload permission.
    - Need a way to grant authentication for this purpose.
  - Add link to the /channels/NAME/ landing page once it's ready for launch
* Dynamic rewards need a major rework. Once the above is done, maybe the builtin
  can do the dynamic updates too?
  - Change the Add New Dynamic to let you select any manageable reward first
  - If you don't pick one, then you can create new (optionally copying)
* Classic command editor is lagging behind a bit.
  - Set variable, "extra config", that sucks. The whole destcfg thing is a bit of a
    hack though, so I don't think it's worth going to any effort for this yet.
  - Mode "foreach" is also clunky, plus it can't have the participant_activity set.
* GUI editor - params need formatting options, in and out
  - Builtin params need to cope with splitting strings to arrays
* Rename "gifted" flag in sub alerts to "is_gifted" to trigger boolean handling
  - Migrate existing settings
* Replace bcaster_token[name] with user_token[id] and ditto scopes
  - Have a compatibility function that returns a promise and yields the token
    when the name has been translated into an ID
* Raidfinder: include your stream teams? Make it an option?
  - GET https://api.twitch.tv/helix/teams/channel?broadcaster_id=YOU
    - Cache the team IDs maybe, to reduce the number of API calls - most people
      don't join/leave teams often
  - https://api.twitch.tv/helix/teams?id=6358&id=7384
    - Cache the member IDs but not for as long
  - Purge both caches on looking at a specific page or subpage that looks at
    teams, which can also be where you choose to have teams active
* Alertbox: For any non-personal alert, have a "Revert to Stock" which deletes the
  alert settings that you have, aside from the "Active" flag
  - It may be worth having Active be a single-attribute update, so when you toggle
    activation status, it doesn't save everything else.
  - When an alert does not have any other details set, it uses a stock alert. Thus
    you can easily enable and disable alerts, without having to do the work of
    creating them. (I think they should start enabled?)
* Hype trains seem to be uncapped now.
  - Remove special-casing of level 5. Keep the code somewhere though.
  - Figure out a pattern to the growth rate and therefore the threshold for Super
    Hard difficulty (ergo the sixth emotes)
  - Otherwise, pretty much everything should work
* Find all forms in dialogs and use tag=formdialog instead
* chan_giveaway is trying to reference something provided by chan_pointsrewards,
  which fails on fresh start. This breaks the command editor. FIX THIS.
* Somewhere in either giveaway or pointsrewards, something attempts to query the
  rewards for Mustard Mine, which bombs with a 403 (b/c not affiliate). Track it
  down at some point; may need to add some instrumentation.
* Have an image that people can use to link to the bot's landing page, if they
  wish to give credit.
* Merge /features into the channel landing page?
  - Now that channel pages have a sidebar, there's less need for the Home page, which
    could then subsume /features without issues. (Make /features an alias to it.)
  - This would transform the landing page into a sort of control panel, where you can
    make sweeping configuration changes (like enabling/disabling features and setting
    time zone).
* Before Aug 3rd, complete the changeover to follower requests with authentication
  - See poll.pike and comments regarding this date
* Other support platforms? Which ones have integrations available?
  - Should /kofi be renamed and grow all the others?
  - Throne?
* Seek verification status.
  - https://dev.twitch.tv/limit-increase
  - Requires a panel on the bot's channel saying:
    (1) Owner contact information,
    (2) Bot description,
    (3) Instructions on how to add the bot to a channel, and
    (4) Instructions on how to remove the bot from a channel
  - Appeal to Twitch for the name StilleBot? If it can be made available, activate it as
    another voice, and maybe make it the new default. Otherwise use MustardMine.
* Bot sharding. What would it take?
  - MUST NOT disrupt external usage eg URLs
  - Each channel will need to stay together, meaning that all shards will need IRC and
    web connections
  - User preferences must be non-sharded; if you are using multiple channels, prefs are
    still synchronized across them.
  - Must be dynamic. This will allow bot restarts to happen progressively by adding and
    removing shards.
  - Might require a single central dispatcher. This is a minor problem but not huge (at
    the moment). Maybe the dispatcher can be the same code as any other shard, with some
    way to know "there are other shards over there and there"?
    - If possible, the central dispatcher should be able to move. Might require some
      careful handling though.
  - Incoming webhooks have to be dispatched to the shards
  - Updates to persisted info need to be centralized. This may predicate this on a config
    system built on something other than JSON files. Maybe move to PGSQL?
  - May be of lower importance now that the IRC connection can be sharded within a single
    process; this is no longer a startup performance concern, but a reduction in outages
    and potential geographic sharding.
* Consider changing the font used everywhere, to improve consistency (default font seems
  to vary in size btwn Chrome and Ff).
  - Possible font options: Lato, Nunito, Prompt, Hind
* Create a command in the MustardMine channel (and StilleBot if it gets granted to me) to
  add the bot to the user's channel. Note that, if a person misbehaves and the bot gets
  deauthenticated from their channel, all I have to do is ban them from #mustardmine and
  the bot will never need to worry about reactivation.
  - Note that this will mean that this is a canonical list of banned users and thus should
    be queried (by API) if ever there is the need to do so.
* Similarly, a command to remove the bot from a channel
  - Instead of immediately deleting all data, though, flag the channel as "deactivated",
    and purge after some delay (eg a week). If the channel is reactivated in that time,
    all data should be kept.
  - Or should data be kept permanently, and have a separate "delete my data" action?
* Handle shoutout errors better
  - User not found
  - On cooldown (don't show to user though)
  - Other/unexpected error (report to user)
* Per-channel per-user data
  - Variables - can use "$*foo$" or "$49497888*foo$" for explicit UID
    - Support this notation for cooldowns too?? Including aliasing via the builtin.
  - Channel currency?? Would become available as "*points" but automatically incremented
    according to rules like "+1 every 5 minutes to all in chat".
    - It's now possible to do this manually (have an automated command that adds to a
      variable for each chatter), but would be convenient to configure it in one place.
* Block bad variable names (those with "$|{}") on the front end - on the back end, those
  characters will be silently stripped out.
* Identify whispers better
  - When a whisper comes in, be sure we know which voice received it
  - Allow whispers to trigger commands in some per-channel way
    - Channel config->whispers_as_commands - no current way to set it
    - What about secondary voices? For example, whispering CandiCat could execute commands
      in #devicat and then whisper the response from CandiCat.
* Convert persist_config->channels to use user IDs as keys instead of channel names
  - Everything that looks this up should be safe now, using channel[*]->login instead
  - connection.pike will need to be reworked to use the userid as fundamental
  - window.pike will need to be rethought majorly
  - Search for FIXME-SEPCHAN for anything that directly references the config mapping.
* Once all usage of channel->name, channel->name[1..], (string)channel->userid in any
  persist query is done through path() or has_path(), transform them into abstract lookups.
  - Support exists within persist->path() and has_path() and will become available next time
    the bot restarts (20230721).
  - Keep the existing lookups unchanged for stability. Monitor to ensure that nothing breaks.
  - Eventually, rename all to use the userid - no code should break.
    - Should™.
* Move twitchbot_commands.json into persist_config->path("channels", channel, "commands")
  - Maybe keep the existing JSON file in case there's need for global echocommands? Or not.
  - The G->G->commands lookup mapping would now ONLY be for global commands, and even they
    might end up not being needed (if builtins do all the work). This would, in fact, shift
    commands from "commands, echocommands, and echocommands that call on builtins" to just
    "commands, some of which call on builtins".
  - foreach (({cmd + channel->name, cmd}), string tryme)
    - Now instead of two lookups with different keys into one mapping, it looks up one key
      into two different mappings
    - foreach (({channel->config->commands, G->G->commands}), mapping tryme)
  - Both are currently supported; new/updated commands should be saved into the channel's
    configs. At some point, migrate all commands, and eventually, disable echocommands.
* Eventually, move persist_config to a directory of config files, one per channel, with a
  global config for things that don't apply to one channel. Save into channels/49497888.json
  with globals remaining in twitchbot_config.json for now.
* Eventually, move all per-user config out of persist_status into a directory, similarly.
  For example, persist_status->bcaster_token->rosuav would now become users/49497888.json
  with a key of user_token (see above re other changes there).
  - Note that anything that isn't clearly one single user's data (such as raids) can stay
    where it is.
* Migrate channel info out of persist_status into channel config
* Allow users to take a backup of their full config?? Currently the "Backup Settings" thing
  is designed to have consistent format so people can git-manage it, but if I move stuff
  from persist_status into there, it might not work so well for that. Or maybe I keep the
  current "settings" backup but have a separate thing for a GDPR-style "request my info"?
  Not sure that I want to dig into the full details of GDPR, and I definitely don't want to
  imply that I have if I haven't.
* Make the GUI command editor more accessible
  - GET A SCREENREADER and see how everything sounds. If needed, adjust.
    - Orca sucks. What others are there?
* Should Favourites become a tray like any other??
* Deprecate the use of functions as command handlers, and G->G->commands
  - Instead of having commands be code directly, provide builtins and then have commands
    be echoable_messages that use them. Good defaults will make this easy.
  - May simplify find_command somewhat as flags like "mod-only" will always and only be
    in the mapping, not in the function's object.
  - For every command handler module, convert it into a builtin_command and provide a
    command suggestion. This will then activate it in the features list, allowing each
    command to be enabled or disabled. Some commands may end up being grouped into a
    single builtin (eg quote doesn't need to have three separate builtins).
  - Need a way to group features for sorting, and maybe provide some visual separation.
    Maybe sort by description??
* Should the !help command be deprecated? If not, should it become a builtin in some way?
* Raid suggestions: sort by #times suggested
  - Username "also" suggested. Do this only after the filtering to fifteen minutes - in that func.

* Per-channel rate limiting instead of the current one-per-second globally
  - Where the bot is a mod, the limit is three per sec. In other channels, must respect slow mode.
  - Is there a way to detect channel slow mode on connection? If it changes, there's a NOTICE.
    - Possibly ROOMSTATE, but I'm not receiving those.
* Variables.
  - NOTE: As of 2021-01-13, all variables are stored in persist_status->variables->#chan->$var$
    and any that aren't dollar-bracketed are buggy. This may change in the future, with
    the persisted mapping NOT having the dollar signs.
* Add some example/template commands that use cooldowns.
  - The functionality exists, but it can be used in a variety of ways. Good examples:
    - Short cooldown, no else. A simple squelch effect (command can't be used inside
      fifteen seconds).
    - Long cooldown, 'else' has alternate message. Command gives you some actual benefit,
      and you can only use it once every hour.
    - Very short cooldown (2 seconds), 'else' adds to variable and has output with a two
      second delay that emits everything from the variable. Will batch up busy responses.
      - Would be perfect in a !!giveaway_ticket special, or anything where it's normal
        for lots of people to use it all at once.
* Across an update of connection.pike, retain the mod list, until such time as we get an
  updated list.
* Pike HTTP, SSL, and keep-alive: what's going on? Is that why Chrome gets confused?
  - It's currently just disabled - we add "Connection: close" to all responses. Would
    be nice to figure out what's actually wrong and then reap the performance benefits.
* On the bot's emote list, allow search/filter by text
* Advanced timer functionality
  - If there's already a timer of this command happening, allow the user to pick whether it
    adds another independent one (current behaviour), restarts the timer (cancel existing
    and create new), or errors out with an immediate message of some sort.
  - Optionally emit message only if online at the time.
* Raid finder: Also show recent outgoing raids to allow notes to be added?
  - Or just "pick any channel, add notes". Have it show the stream as if in the raid finder.
  - The allfollows display could be this, but it's nondiscoverable and could be quite costly
    for people who follow a lot of people.
  - Adding ?raiders will show incoming, but not outgoing, raids.
* Move "$$autoform||$$" from markdown.html into each of the files that actually wants it
* Use persist_status->path("bcaster_token")[chan] for all need-more-auth calls
  - Use ensure_bcaster_login rather than ensure_login for the retention of scopes.
* Importing of config export files
  - Ignore the active flag but keep the allcmds flag?
  - Create all listed commands, but don't destroy unmentioned ones (overwrite any with
    the same name, of course). Ditto specials, but whitelist the names, of course.
  - Identify triggers by their IDs, and merge accordingly.
    - What happens if they're in a different order? This is currently the only plausible
      way to reorder triggers, which might be significant.
  - Update timezone if specified.
  - What about quotes??? How do we validate their format?
    - Hand each one, individually, to the updater from the front end??
* Allow dialogs to be dragged around??
  - May have some awkward interactions with (a) dialogs that resize themselves eg commands
    advanced view, (b) window resizes, and (c) closing and opening a dialog. Especially if
    it isn't obvious what's the same dialog and what's not.
* Is it possible to get a "recent messages" timeout? Would allow squishing of spam if the
  channel is too quiet. Might not be worth it though.
* Polish multi-voice.
  - This would allow the bot to see its own messages, but only if sent by a non-primary
    account.
  - Can this kind of auth be used to get host notifications??
  - Allow accounts to have a different default voice - probably just the channel's own.
    Then allow people to activate the bot, authenticate for self-voicing, and immediately
    start using bot features, with some restrictions, and with me able to lift those by
    granting them full permission.
* Authentication on Firefox may now have issues with the default popup blocker. Can we
  comply with normal "click for popup" expectations somehow?
* Enable/disable rewards - allow use of title, will do lookup
* Redemption triggers - specials?
* Create a way to daisychain into an existing command. This will allow a special to
  "alias" to a command, or for a command to do things and then chain.
  - What should happen with nested information eg from builtins?
  - Will this make StilleBot commands Turing-complete?
* If you attempt to rename a command or add an alias that already exists (and isn't an
  alias for the current command), warn on client side and block save unless confirmed.
* Tidy up demo mode a bit.
  - Some pages have mutely nonfunctional buttons - they should announce that it's a demo.
* Goal bar templates - nice easy ones that you can use right away
  - Note that Twitch now has on-platform goals that track current followers and subs,
    so this can continue to focus on how many have been gained recently (eg daily
    sub/resub count).
* Special trigger when any goal bar tiers up?? Would be better than the weird system
  where it triggers an actual command. Could deep link straight to the editor now.
* Client-side per-user preferences are now a thing. Use them where appropriate.
  - Absorb raidnotes into this system.
* "max-width: fit-content" doesn't work in Firefox - but nor does -moz-fit-content :(
  - Causes display problems on graphical editor and opening up element details
* Should runhooks switch to continue functions and then remove the "call next" feature?
  - runhooks is buggy. It needs to be replaced.
* Should ALL specials function as implicit arrays, the way triggers do?
  - Alternatively: should invocations and executions be separated? Aliases would then
    be just another way to have more than one invocation for a single command.
* With the shutdown of Kraken, can we record things locally that used to be on Twitch?
  - Followed games/categories - you can still follow/unfollow but you can't query it in API
* Retain user IDs for all active channels. If one renames, automatically track it.
  - Need to enumerate all the places where a channel name gets used as a config key
    (outside of persist_config->channels->username) so they can be changed too.
* Art Share tool
  - Who may share? Not all options implemented yet.
  - Mod command to nuke the last-posted file?
  - Anyone currently under timeout or ban is to be denied upload permission.
    - Need a way to grant authentication for this purpose.
  - Add link to the /channels/NAME/ landing page once it's ready for launch
* Break out name-to/from-uid mappings into a separate file, maybe not even JSON? Ditto
  the raidfinder cache. Between them they are the bulk of persist_status.
* Alert Box: Alert conditions/variations
  - Not currently supported for host alerts as they are managed directly by the client.
    Changing this would require pushing them out from the server too - might be worth
    it. Unfortunately host notifications require a chat connection logged in as the
    broadcaster, which is most elegantly done on the client; but there are security
    benefits to doing this on the server, so there may be enough value to justify the
    complexity. Would want to have the websocket from the client cause the IRC conn to
    be flagged as in-use, which might mean we'll want to just let them get disconnected
    and then have a hook that reconnects if there are any active websockets.
* Ghostwriter needs a LOT more error checking. Maybe, on error, reschedule check five mins?
* General system for bot-affected channel point redemptions
  - On success, mark redemption as complete
  - If failure of any sort, report, and refund
  - Bring the LispWhispers camhack into that system (via zzlocal)
  - Have a template - a command that's invisible and access-none, and responds to reward
* Alertbox: Parse message text and emotes where appropriate. Send array to client.
  - Might have a configuration on the client to set the image size
    - Set the CSS height for the images, and also pick an appropriate version
    - Alternatively, just use font size??
  - Manually parse/recognize cheer emotes and replace them? Their URLs are part of the
    payload of the cheeremotes query, but at the moment I'm just keeping the keywords.
* Get some default alerts, which will be there (but disabled) initially
  - Collaborate with an artist to make a default animation???
    - I say "collab" b/c this will need specific licensing terms, but I'm willing to pay
      the artist for this.
    - What license? CC-BY-SA-4.0 with special exemption that use unchanged as an alert
      in StilleBot does not require authorship credit?
  - Also track down any other freely shareable images/animations
    - Start with the pie graph, it's a good test
    - Any other freely reusable images? Where was that dog that a Some1 entrant offered
      as an alternative to Lenna?
  - Pick some default sounds from https://freesound.org/ - make sure they're all CC0
  - Host on rosuav.github.io, not as part of StilleBot itself
  - Have a JSON metadata file with, for every file:
    - File name (obviously)
    - Description (and intended use)
    - License
    - Origin (link to freesound for those, link to artist, etc)
    - Type (audio, image, video)
  - Have a "Browse" page on github.io, fully autogenerated by a commit hook
    - If a file exists and isn't in the JSON file, error
  - Add an entry to the StilleBot library for "Default Animations/Sounds"
    - Populated from the JSON file, obviously
    - Maybe just a drop-down, no previews??
* Add to command anchor:
  - Trigger on channel point redemption
    - Is it possible for chan_pointsrewards to simply open up the command popup
      for a particular command? Worst case, deep-link to the editor.
* Builtin to accept/reject a channel point redemption
  - No error if you try to accept/reject blank, so you can code your command to
    always put an accept in this branch and a reject in that one, even if the
    command could be invoked by name or by reward
  - Would require that the reward be created by StilleBot
* Dynamic rewards need a major rework. Once the above is done, maybe the builtin
  can do the dynamic updates too?
* Alertbox: Allow non-bcaster to use preview w/o chat - no authkey but login cookie
  - Real host alerts disabled, but test alerts would work
* Weird bug: After a full update, the first output on voice 0 seems to be lost.
* Classic command editor is lagging behind a bit.
  - Needs point redemption
  - Check list of builtins
  - Can builtins receive multiple args?

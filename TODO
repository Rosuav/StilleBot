* Per-channel rate limiting instead of the current one-per-second globally
  - Where the bot is a mod, the limit is three per sec. In other channels, must respect slow mode.
  - Is there a way to detect channel slow mode on connection? If it changes, there's a NOTICE.
    - Possibly ROOMSTATE, but I'm not receiving those.
* Variables.
  - NOTE: As of 2021-01-13, all variables are stored in persist_status->variables->#chan->$var$
    and any that aren't dollar-bracketed are buggy. This may change in the future, with
    the persisted mapping NOT having the dollar signs.
* Add some example/template commands that use cooldowns.
  - The functionality exists, but it can be used in a variety of ways. Good examples:
    - Short cooldown, no else. A simple squelch effect (command can't be used inside
      fifteen seconds).
    - Long cooldown, 'else' has alternate message. Command gives you some actual benefit,
      and you can only use it once every hour.
    - Very short cooldown (2 seconds), 'else' adds to variable and has output with a two
      second delay that emits everything from the variable. Will batch up busy responses.
      - Would be perfect in a !!giveaway_ticket special, or anything where it's normal
        for lots of people to use it all at once.
* Across an update of connection.pike, retain the mod list, until such time as we get an
  updated list.
* Pike HTTP, SSL, and keep-alive: what's going on? Is that why Chrome gets confused?
  - It's currently just disabled - we add "Connection: close" to all responses. Would
    be nice to figure out what's actually wrong and then reap the performance benefits.
* On the bot's emote list, allow search/filter by text
* Advanced timer functionality
  - If there's already a timer of this command happening, allow the user to pick whether it
    adds another independent one (current behaviour), restarts the timer (cancel existing
    and create new), or errors out with an immediate message of some sort.
  - Optionally emit message only if online at the time.
* Raid finder: Also show recent outgoing raids to allow notes to be added?
  - Or just "pick any channel, add notes". Have it show the stream as if in the raid finder.
  - The allfollows display could be this, but it's nondiscoverable and could be quite costly
    for people who follow a lot of people.
  - Adding ?raiders will show incoming, but not outgoing, raids.
* Move "$$autoform||$$" from markdown.html into each of the files that actually wants it
* Use persist_status->path("bcaster_token")[chan] for all need-more-auth calls
  - Use ensure_bcaster_login rather than ensure_login for the retention of scopes.
* Importing of config export files
  - Ignore the active flag but keep the allcmds flag?
  - Create all listed commands, but don't destroy unmentioned ones (overwrite any with
    the same name, of course). Ditto specials, but whitelist the names, of course.
  - Identify triggers by their IDs, and merge accordingly.
    - What happens if they're in a different order? This is currently the only plausible
      way to reorder triggers, which might be significant.
  - Update timezone if specified.
  - What about quotes??? How do we validate their format?
    - Hand each one, individually, to the updater from the front end??
* Allow dialogs to be dragged around??
  - May have some awkward interactions with (a) dialogs that resize themselves eg commands
    advanced view, (b) window resizes, and (c) closing and opening a dialog. Especially if
    it isn't obvious what's the same dialog and what's not.
* Is it possible to get a "recent messages" timeout? Would allow squishing of spam if the
  channel is too quiet. Might not be worth it though.
* Polish multi-voice.
  - This would allow the bot to see its own messages, but only if sent by a non-primary
    account.
  - Can this kind of auth be used to get host notifications??
* Authentication on Firefox may now have issues with the default popup blocker. Can we
  comply with normal "click for popup" expectations somehow?
* Enable/disable rewards - allow use of title, will do lookup
* Redemption triggers - specials?
* Create a way to daisychain into an existing command. This will allow a special to
  "alias" to a command, or for a command to do things and then chain.
  - What should happen with nested information eg from builtins?
  - Will this make StilleBot commands Turing-complete?
* If you attempt to rename a command or add an alias that already exists (and isn't an
  alias for the current command), warn on client side and block save unless confirmed.
* Tidy up demo mode a bit.
  - Some pages have mutely nonfunctional buttons - they should announce that it's a demo.
* Goal bar templates - nice easy ones that you can use right away
  - Note that Twitch now has on-platform goals that track current followers and subs,
    so this can continue to focus on how many have been gained recently (eg daily
    sub/resub count).
* Special trigger when any goal bar tiers up?? Would be better than the weird system
  where it triggers an actual command. Could deep link straight to the editor now.
* Client-side per-user preferences are now a thing. Use them where appropriate.
  - Absorb raidnotes into this system.
* "max-width: fit-content" doesn't work in Firefox - but nor does -moz-fit-content :(
  - Causes display problems on graphical editor and opening up element details
* Check VLC 3.0.16 to see if there are better docs about the Lua interface
* Should runhooks switch to continue functions and then remove the "call next" feature?
  - runhooks is buggy. It needs to be replaced.
* Should ALL specials function as implicit arrays, the way triggers do?
  - Alternatively: should invocations and executions be separated? Aliases would then
    be just another way to have more than one invocation for a single command.
* With the shutdown of Kraken, can we record things locally that used to be on Twitch?
  - Followed games/categories - you can still follow/unfollow but you can't query it in API
* Alternatively, can I just use GQL from StilleBot? BTTV seems to. If Twitch won't make
  public APIs available for things, they're kinda forcing us to use their internal API.
* Find every place where I use Kraken and put it into a wrapper in modules/twitch_apis.pike
* Host alert widget
  - Transparent normally, but on host, shows custom image (possibly GIF) and plays sound.
    - Preload both on startup so it doesn't need to be poked.
  - Websocket for config synchronization, not for events. Use ComfyJS for that.
    - Group "config#channel" for the main web interface
    - Group "display#channel" for the viewer. BOT_BASIS/channels/CHANNEL/hostalert?key=KEY
      to trigger this; if no key=, use config mode (mod only). If wrong key=, static error.
  - Have an auth key like VLC's (but probably not the same one), so it doesn't need login
  - Incorporate custom text with a placeholder for the login/display name
  - Full style config as per monitors
  - Basic styling of the image only, but have a published ID so people can use custom CSS?
  - OAuth key (bcaster token) sent on WS sync
  - Must accept file uploads for GIF/PNG and audio (support OGG, MP3, not WAV). Assign IDs
    and save the files into a non-tracked directory named "{userid}-{fileid}", extension
    optional. Save user's original file name as default description, allow it to be edited,
    retain in persist_status.
  - Limit file size to 5MB for now. I've heard of people with 3MB GIFs, and my Cheshire Cat
    images are 11MB, but those are by far the exception. Limit per user, maybe 25MB? Allow
    files to be deleted (obviously). If upload same file name, offer to delete other?
  - On receipt of configs, if OAuth included and not same as previous, (re)connect.
  - If no OAuth token received after timeout (maybe 3-5 seconds), show error message in
    browser window. If connection fails, show error.
  - It's not currently possible to push out a WS update every time bcaster login changes.
    But if a login is done _on this page_, we can send out the update.
  - Don't support multiple host alert boxes immediately, but don't rule out the possibility.
  - Have a "test alert" button which sends a special WS message. But normally it wouldn't be
    managed by the WS.
  - If you refresh the browser source, it will reset the record of "seen this host".
  - Borrow host notification code from Lisp Whispers
